spring:
  datasource:
    platform: postgres
    url: jdbc:h2:mem:db;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
    username: sa
    password: sa
    driverClassName: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  kafka:
    kafka:
      properties:
        security.protocol: PLAINTEXT
        ssl:
          keystore: null
          truststore: null
      bootstrap-servers: ${spring.embedded.kafka.brokers}
      producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      consumer:
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        group-id: "kontakt-oss"

# kontakt-oss
kontakt-oss:
  kafka:
    config:
      bootstrap-servers: ${spring.embedded.kafka.brokers}
      truststore-path: null
      truststore-password: null
      keystore-path: null
      keystore-password: null
      security-protocol: PLAINTEXT
    enabled: false


kontaktskjema.max-requests-per-10-min: 1000

mock:
  enabled: true
  port: 8081
  baseUrl: http://localhost:${mock.port}${server.servlet.context-path}

norg:
  url: ${mock.baseUrl}/norg
kodeverk:
  url: ${mock.baseUrl}/kodeverk
unleash:
  url: http://unleash.herokuapp.com/api/
  profile: local

salesforce:
  auth:
    url: ${mock.baseUrl}/salesforce/auth
  contactform:
    url: ${mock.baseUrl}/salesforce/contactform
  username: user
  password: pass
  client:
    id: blabla
    secret: sdjhfg

nais:
  cluster:
    name: local




